

事务
   原子性 要么全部执行，要么不执行
   一致性 将数据从一个一致性状态改变为另一个一致性状态。
   隔离性 从事务外部来看，事务的一致性实现了从两个一致性状态之间的转换。
		  从内部来看组成事务操作按照一定顺序进行，所以数据具有位于两个一致性状态中间的‘中间状态’。
		  中间状态应该被隔离在事务内部，对事务外部不可见。
   持久性 一旦成功提交，基于持久化资源的数据将会被持久化，对数据的改变是永久的。

   基于单一资源访问的事务，成为本地事务。

   将多个资源，多个服务进行统一协作的成为分布式事务。

分布式事务
	将对多个事务资源的访问纳入同一个事务
	一个服务操作访问两个数据库

	将对多个服务的调用纳入同一个事务
	一个服务调用另一个服务，需要将事务流转到另一个事务。

	将多个资源和服务的访问纳入同一个事务
	以上两种场景结合在一起，一个服务调用另一个服务，另一个服务调用多个事务资源。

事务模型的三种角色
	应用、服务、组件：代表用户组件或者承载某种功能的服务或组件 
	资源管理器：管理具体事务性资源的软件程序 数据库管理系统 队列MSMQ
	事务管理器：代表管理事务的中间件程序，为应用和资源管理器提供基本的事务控制服务。

	应用的作用：开启事务、事务封送、事务提交

	资源管理器：持久资源管理器（数据库系统、队列）、易失型资源管理器（内存）
			在分布式事务的两阶段提交协议中，对这两种不同的资源管理器，采用不同的等级方式。
			在事务承担如下责任：帮助应用实现对目标资源的操作
								注册到相应的事务管理器，以便事务回滚时可以从事务管理器中接收到恢复请求，实现对数据的恢复
								向相应的事务管理器报告本地事务的结果

	事务管理器：整个事务模型的核心，控制事务所有参与者，协调事务从开始到完成的整个流程。
		    轻量级事务管理器：
			内核事务管理器：
			分布式事务协调器：
    分布式事务采用两阶段提交协议。
	第一阶段：准备阶段
	第二阶段：提交或回滚
		
	第一阶段后，网络断开，涉及未决事务的处理。

	只有唯一的上下级，单阶段提交。

    CAP  ：一致性  可用性  分区容错  
			分区容错必须满足，所有智能AP或者CP。
			zookeeper采用CP，弱一致性，分布式协调器。
		
