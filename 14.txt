

事务
   原子性 要么全部执行，要么不执行
   一致性 将数据从一个一致性状态改变为另一个一致性状态。
   隔离性 从事务外部来看，事务的一致性实现了从两个一致性状态之间的转换。
		  从内部来看组成事务操作按照一定顺序进行，所以数据具有位于两个一致性状态中间的‘中间状态’。
		  中间状态应该被隔离在事务内部，对事务外部不可见。
   持久性 一旦成功提交，基于持久化资源的数据将会被持久化，对数据的改变是永久的。

   基于单一资源访问的事务，成为本地事务。

   将多个资源，多个服务进行统一协作的成为分布式事务。

分布式事务
	将对多个事务资源的访问纳入同一个事务
	一个服务操作访问两个数据库

	将对多个服务的调用纳入同一个事务
	一个服务调用另一个服务，需要将事务流转到另一个事务。

	将多个资源和服务的访问纳入同一个事务
	以上两种场景结合在一起，一个服务调用另一个服务，另一个服务调用多个事务资源。

事务模型的三种角色
	应用、服务、组件：代表用户组件或者承载某种功能的服务或组件 
	资源管理器：管理具体事务性资源的软件程序 数据库管理系统 队列MSMQ
	事务管理器：代表管理事务的中间件程序，为应用和资源管理器提供基本的事务控制服务。
		轻量级事务管理器（LTM）：仅限于开启事务的应用程序域，允许登记一个持久化资源，多个易失性资源
		内核事务管理器（KTM）：运行在内核态，加入了对文件和注册表的事务。与轻量级事务管理器一样，允许登记一个持久化资源，多个易失性资源
		分布式事务协调器（DTC）：用于跨边界执行的分布式事务。采取相应的协议，比如WS-Atomic-Transaction,协调分布式事务的所有参与者。
								每一台机器具有一个唯一的DTC，管理着本地的所有资源管理器。跨机器时，需要多台机器的DTC进行协调。


	应用的作用：开启事务、事务封送、事务提交

	资源管理器：持久资源管理器（数据库系统、队列）、易失型资源管理器（内存）
			在分布式事务的两阶段提交协议中，对这两种不同的资源管理器，采用不同的等级方式。
			在事务承担如下责任：帮助应用实现对目标资源的操作
								注册到相应的事务管理器，以便事务回滚时可以从事务管理器中接收到恢复请求，实现对数据的恢复
								向相应的事务管理器报告本地事务的结果

	事务管理器：整个事务模型的核心，控制事务所有参与者，协调事务从开始到完成的整个流程。
		    轻量级事务管理器：
			内核事务管理器：
			分布式事务协调器：
    分布式事务采用两阶段提交协议。
	第一阶段：准备阶段
	第二阶段：提交或回滚
		
	第一阶段后，网络断开，涉及未决事务的处理。

	只有唯一的上下级，单阶段提交。

    CAP  ：一致性  可用性  分区容错  
			分区容错必须满足，所有智能AP或者CP。
			zookeeper采用CP，弱一致性，分布式协调器。
			
事务处理协议：OleTx 、 WS-AT
	OleTx ：OleTx采用RPC作为通信手段，采用二进制消息编码，不具有跨平台特质
	WS-AT ： 具有跨平台特质

WS-AT：
	WS-Coordination，通过一个协调器和若干协调协议定义一个可扩展的框架去协调一个分布式活动的所有参与者。
	WS-AT和WS-BA就是两个基于WS-Coordination的协调协议。
	1.基于协调器的协调模型
	  协调器是协调服务的容器，按其服务作用分为三种类型
		激活服务
		注册服务
		协议服务

WCF事务编程
	通过服务契约决定事务流转的策略
	通过绑定实施事务的流转
	通过服务/操作行为控制事务的相关行为

通过服务契约决定事务流转的策略
	TransactionFlowAttribute
	  TransactionFlowOption： 
			NotAllowed  默认不流转
			Allowed  客户端事务存在，流入服务端，服务端接受
			Mandatory 客户端必须在一个事务中进行调用，事务流入服务端，服务端接受到的消息必须包含被序列化的事务。

通过绑定实施事务的流转
	TransactionFlowBindingElement
	TransactionProtocol : OleTx  、 WS-AT1.0、  WS-AT1.1
	
通过服务/操作行为控制事务
	事务的自动登记与提交
	OperationBehavior中与事务相关的属性
		TransactionAutoComplete ：如果操作过程中没有抛出异常，完成后将自动提交事务。
		TransactionScopeRequired ： 相应的操作是否纳入到一个事务中。
	事务相关的服务行为
		ServiceBehavior特性定义了4个与事务相关的属性
			TransactionIsolationLevel : 隔离级别，默认IsolationLevel.Serializable
			TransactionTimeout: 以字符串形式定义事务超时时限
			TransactionAutoCompleteOnSessionClose: 在会话正常结束后是否自动提交或完成开启的事务，默认false
			ReleaseServiceInstanceOnTransactionComplete: 当事务完成之后是否需要将服务实例释放，默认false

WCF 事务实现原理
	TransactionFlowAttribute 行为
	事务绑定
	  客户端在事务信道将当前事务写入，服务端在事务信道将当前事务读出。事务读写由TransactionFormatter操作。
	  按照协议不同，分别有OleTxTransactionFormatter WsatTransactionFormatter10   WsatTransactionFormatter11

	事务的自动登记
	  被格式化的事务最终是作为一个消息报头的形式被传输的。服务端接受到包含流入事务的消息后，从相应报头获取将被
	  格式化的事务，对事务进行重建，被重建的事务对象最终以消息属性的形式重新放入入栈消息。
	  包含事务对象的消息定义在TransactionMessageProperty的对象之中。
	  WCF运行时根据消息的action报头定位到相应的操作，如果该操作应用了OperationBehavior并将TransactionScopeRequired为Ture，
	  1、 如果入栈消息包含事务消息属性，则提取该事务并基于该事务创建TransactionScope。该过程本质是创建流入事务的依赖事务，
	  并将创建的依赖事务作为环境事务。
	  2、如果入栈消息不包含事务消息属性，则创建一个新的TransactionScope，相当于创建了一个可提交事务，并把该事务作为当前的环境事务。
	  上面的过程是在操作方法被调用前完成，并且和操作方法处于相同的线程中。

	OleTx提升机制
		OleTx是win平台下默认的分布式事务协议，采用安全rpc协议通信，并采用二进制编码。如果显示的采用ws-at协议，如果dtc发现当前
		场景仍然能够使用OleTx进行处理，会将ws-at协议提升为OleTx协议。
		Oletx仅仅需要事务的传播令牌。


	

